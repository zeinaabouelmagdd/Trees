#include <iostream>
using namespace std;

class Node{
public:
    int data;
    Node* left;
    Node* right;
        
    Node(int value){
        data = value;
        left = right = nullptr;
    }
};

class Tree{
public:
    Node* root;
    
    Tree(){
        root = nullptr;
    }
    
    Node* insert(Node* node, int value){
        if (node == nullptr){
            return new Node(value);
        }
        if (value < node->data){
            node->left = insert(node->left,value);
        } else {
            node->right = insert(node->right,value);
        }
        return node;
    }
    
    void inOrderTraversal(Node* node){
        if (node != nullptr) {
            inOrderTraversal(node->left);
            cout << node->data << " ";
            inOrderTraversal(node->right);
        }
    }
    
     void preOrderTraversal(Node* node){
        if (node != nullptr) {
            cout << node->data << " ";
            preOrderTraversal(node->left);
            preOrderTraversal(node->right);
        }
    }
    
     void postOrderTraversal(Node* node){
        if (node != nullptr) {
            postOrderTraversal(node->left);
            postOrderTraversal(node->right);
            cout << node->data << " ";
        }
    }
    
    
}


